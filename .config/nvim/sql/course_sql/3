-- 2
CREATE TABLE posts (
	id SERIAL PRIMARY KEY,
  author_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(200) NOT NULL,
  body TEXT NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'draft',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ
);

-- 3
INSERT INTO posts (author_id, title, body, status)
VALUES
	(1, 'Post user 1', 'body post 1', 'published'),
	(2, 'Post user 2', 'body post 2', 'draft'),
	(3, 'Post user 3', 'body post 3', 'published');

-- 1
SELECT 
	u.username,
  COUNT(p.id) AS posts_count
FROM users u
LEFT JOIN posts p ON p.author_id = u.id
GROUP BY u.username;

-- 4
SELECT 
	u.username,
  p.*
FROM posts p
JOIN users u ON u.id = p.author_id
WHERE p.status = 'published';

SELECT 
  u.username, 
  p AS post
FROM posts p
JOIN users u ON p.author_id = u.id
WHERE p.status = 'draft';


-- 5
CREATE TABLE comments (
	id SERIAL PRIMARY KEY,
  post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
  author_id INTEGER NOT NULL REFERENCES users(id) ON DELETE SET NULL,
  body TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);

-- 6
INSERT INTO comments (post_id, author_id, body)
VALUES 
	(1, 1, 'nice work'),
  (1, 2, 'agree'),
  (3, 2, 'comment to post 3 from user 2');

-- 7
SELECT 
	u.username,
	c.body 
FROM comments c 
JOIN users u ON u.id = c.author_id
WHERE c.post_id = 1 AND c.is_deleted != TRUE;

-- 8
CREATE TABLE groups (
	id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  is_public BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE group_members (
	user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  group_id INTEGER REFERENCES groups(id) ON DELETE CASCADE,
  joined_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (user_id, group_id)
);

-- 9
INSERT INTO groups (name, description)
VALUES 
	('Developer', 'Group for IT developers'),
  ('Product Manager', 'Group for PM''s');

INSERT INTO group_members (user_id, group_id)
VALUES
	(1,1),
	(2,2),
  (3,1);

-- 10
SELECT 
	u.username,
  g.name
FROM groups g
JOIN group_members gm ON gm.group_id = g.id
JOIN users u ON u.id = gm.user_id
WHERE u.username = 'user_1';


-- 11
CREATE TABLE topics (
  id SERIAL PRIMARY KEY,
	group_id INTEGER REFERENCES groups(id) ON DELETE SET NULL,
  name VARCHAR(100) NOT NULL,
  description TEXT
);

-- 12
CREATE TABLE news (
	id SERIAL PRIMARY KEY,
  author_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
  title VARCHAR(200) NOT NULL,
  body TEXT NOT NULL,
  published_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  priority SMALLINT NOT NULL DEFAULT 5 CHECK(priority BETWEEN 1 AND 10)
);


-- 13
INSERT INTO topics (group_id, name)
VALUES 
	(1, 'your''e sql developer now'),
  (NULL, 'System Updates');

INSERT INTO news (author_id, title, body, priority)
VALUES
	(1, 'Course SQL', 'let start', 8),
  (3, 'Course JS', 'idk', 6);


-- 14
SELECT * 
FROM news n 
WHERE n.priority >= 6
ORDER BY n.published_at DESC;
